 função  init ( )  { 
    meuDiagrama =  novo  go . Diagrama ( 'myDiagramDiv' ,  { 
      allowCopy :  false , 
      allowDelete :  false , 
      initialAutoScale : go . AutoScale . UniformToFill , 
      maxSelectionCount :  1 ,  // os usuários podem selecionar apenas uma parte por vez 
      validCycle : go . CycleMode . DestinationTree ,  // garante que os usuários só possam criar árvores 
      'clickCreatingTool.archetypeNodeData' :  { 
        // permite clique duplo em segundo plano para criar um novo nó 
        nome :  '(Nova pessoa)' , 
        título :  '(Título)' , 
        dept :  '(Dept)' 
      } , 
      'clickCreatingTool.insertPart' :  function  ( loc )  { 
        // a substituição do método deve ser função, não => 
        const node = go . ClickCreatingTool . prototype . insertPart . call ( this , loc ) ; 
        if  ( node !==  null )  { 
          this . diagrama . selecione ( nó ) ; 
          este . diagrama . commandHandler . scrollToPart ( nó ) ; 
          este . diagrama . commandHandler . editTextBlock ( nó . findObject ( 'NAMETB' ) ) ; 
        } 
        retornar nó ; 
      } , 
      layout :  novo  ir . TreeLayout ( { 
        treeStyle : ir . TreeStyle . LastParents , 
        arranjo : ir . TreeArrangement . Horizontal ,
        // propriedades para a maior parte da árvore: 
        angle :  90 , 
        layerSpacing :  35 , 
        // propriedades para os "últimos pais": 
        alternateAngle :  90 , 
        alternateLayerSpacing :  35 , 
        alternateAlignment : go . TreeAlignment . Bus , 
        alternateNodeSpacing :  20 
      } ) , 
      'undoManager.isEnabled' :  true ,  // habilita desfazer e refazer 
      'themeManager.changesDivBackground' :  true , 
      'themeManager.currentTheme' : document . getElementById ( 'theme' ) . value
     } ) ;

    // quando o documento for modificado , adicione um " * " ao título e habilite o botão "Salvar" 
    myDiagram . addDiagramListener ( 'Modified' , (  e ) =  >  { const 
      button = document.getElementById ( ' SaveButton ' ) ; if ( button ) button.disabled = ! myDiagram.isModified ; const idx = document.title.indexOf ( ' * ' ) ; if ( myDiagram.isModified ) { if ( idx < 0 ) document.title + = ' * ' ; } else { if ( idx > = 0 ) document.title = document.title.slice ( 0 , idx ) ; } } ) ;
        
      
        
           
        
          
      
    

    // configure algumas cores/fontes para os temas padrão ('claro') e escuro 
    myDiagram . themeManager . definir ( 'luz' ,  { 
      cores :  { 
        fundo :  '#fff' , 
        texto :  '#111827' , 
        destaque de texto :  '#11a8cd' , 
        subtexto :  '#6b7280' , 
        emblema :  '#f0fdf4' , 
        borda do emblema :  '#16a34a33' , 
        texto do emblema :  '#15803d' , 
        divisor :  '#6b7280' , 
        sombra :  '#9ca3af' , 
        dica de ferramenta :  '#1f2937' , 
        níveis :  [ 
          '#AC193D' , 
          '#2672EC ' , 
          '#8C0095' , 
          '#5133AB' , 
          '#008299' , 
          '#D24726' , 
          '#008A00' , 
          '#094AB2' 
        ] , 
        dragOver :  '#f0f9ff' , 
        link :  '#9ca3af' , 
        div :  '#f3f4f6' 
      } , 
      fontes :  { 
        nome :  '500 0,875rem InterVariable, sans-serif' , 
        normal :  '0,875rem InterVariable, sans-serif' , 
        emblema :  '500 0,75rem InterVariable, sans-serif' , 
        link :  '600 0,875rem InterVariable, sans-serif' 
      } 
    } ) ;

    myDiagram . themeManager . set ( 'escuro' ,  { 
      cores :  { 
        fundo :  '#111827' , 
        texto :  '#fff' , 
        subtexto :  '#d1d5db' , 
        emblema :  '#22c55e19' , 
        borda do emblema :  '#22c55e21' , 
        texto do emblema :  '#4ade80' , 
        sombra :  '#111827' , 
        dragOver :  '#082f49' , 
        link :  '#6b7280' , 
        div :  '#1f2937' 
      } 
    } ) ;

    // isto é usado para determinar o feedback durante arrastos 
    function  mayWorkFor ( node1 , node2 )  { 
      if  ( ! ( node1 instanceof  go . Node ) )  return  false ;  // deve ser um Node 
      if  ( node1 === node2 )  return  false ;  // não pode funcionar para você 
      if  ( node2.isInTreeOf ( node1 ) ) return false ; // não pode funcionar para alguém que trabalha para você return true ; }   
       
    

    // Este conversor é usado pela função Picture. 
    function  findHeadShot ( pic )  { 
      if  ( ! pic )  return  '../samples/images/user.svg' ;  // Há apenas 16 imagens no servidor 
      return  '../samples/images/hs'  + pic ; 
    }

    // Usado para converter o nível da árvore do nó em uma 
    função de cor de tema  findLevelColor ( node )  { 
      return node . findTreeLevel ( ) ; 
    }

    
    // Obtém o texto para uma dica de ferramenta com base no nome do objeto adornado function  toolTipTextConverter ( obj )  { 
      if  ( obj.name === ' EMAIL ' ) return obj.part.data.email ; if ( obj.name === ' PHONE ' ) return obj.part.data.phone ; }  
         
    

    
    // Alinha a dica de ferramenta com base nos limites da janela de visualização do objeto adornado function toolTipAlignConverter ( obj  , tt ) { const d  = 
      obj.diagram ; const bot = obj.getDocumentPoint ( go.Spot.Bottom ) ; const viewPt = d.transformDocToView ( bot ) .offset ( 0 , 35 ) ; // se a dica de ferramenta estiver abaixo da janela de visualização , mostre
           acima const align = 
        d.viewportBounds.height > = viewPt.y / d.scale ? new go.Spot ( 0.5 , 1 , 0 , 6 ) : new go.Spot ( 0.5 , 0 , 0 , -6 ) ;
      
       
      
           
               

      tt . alinhamento = alinhar ; 
      tt . alinhamentoFoco = alinhar . y ===  1  ? ir . Local . Topo : ir . Local . Fundo ; 
    }

    // uma dica de ferramenta para os botões de e-mail e telefone 
    const toolTip =  new  go . Adornment ( go . Panel . Spot ,  { 
      isShadowed :  true , 
      shadowOffset :  new  go . Point ( 0 ,  2 ) 
    } ) 
      . adicionar ( 
        novo  ir . Placeholder ( ) , 
        novo  ir . Painel ( ir . Painel . Automático ) 
          . adicionar ( 
            novo  ir . Forma ( 'RoundedRectangle' ,  {  strokeWidth :  0 ,  shadowVisible :  true  } ) . tema ( 'preenchimento' ,  'plano de fundo' ) , 
            novo  ir . Bloco de texto ( {  margem :  2  } ) 
              . bindObject ( 'texto' ,  'adornedObject' , toolTipTextConverter ) 
              . tema ( 'traço' ,  'texto' ) 
              . tema ( 'fonte' ,  'normal' ) 
          ) 
          // define o alinhamento e o alignmentFocus com base na posição do objeto adornado na janela de visualização 
          . bindObject ( '' ,  'adornedObject' , toolTipAlignConverter ) 
      ) 
      tema ( 'shadowColor' , 'sombra ' ) ; 

    // define o modelo de nó 
    myDiagram . nodeTemplate =  new  go . Node ( go . Panel . Spot ,  { 
      isShadowed :  true , 
      shadowOffset :  new  go . Point ( 0 ,  2 ) , 
      selectionObjectName :  'BODY' , 
      // mostrar/ocultar botões quando o mouse entra/sai 
      mouseEnter: (e, node) => (node.findObject('BUTTON'). opacity =  node.findObject ( ' BUTTONX '  ) 
        . opacity = 1 ) , mouseLeave : ( e , node ) = > { if ( node.isSelected ) return ; // se selecionado , não ocultar botões node.findObject ( ' BUTTON ' ) . opacity = node.findObject 
        ( ' BUTTONX ' ) . opacity = 0 ; } , // manipular o arrasto de um nó para um nó para (talvez) alterar o relacionamento de relatório mouseDragEnter : ( e , node , prev ) => { const diagrama = nó . diagrama ; const selnode = diagrama . seleção . primeiro ( ) ; if ( ! mayWorkFor ( selnode , nó ) ) return ; const forma = nó . findObject ( 'FORMA' ) ; if ( forma ) { 
          forma . _prevFill = forma . 
         
            
      
      
         
        
        
          
        
          fill ;  // lembrar o 
          formato original do pincel . fill = diagram . themeManager . findValue ( 'dragOver' ,  'colors' ) ;  // "#e0f2fe"; 
        } 
      } , 
      mouseDragLeave :  ( e , node , next )  =>  { 
        const shape = node . findObject ( 'SHAPE' ) ; 
        if  ( shape && shape . _prevFill )  { 
          shape . fill = shape . _prevFill ;  // restaurar o pincel original 
        } 
      } , 
      mouseDrop :  ( e , node )  =>  { 
        const diagram = node . diagram ; 
        const selnode = diagram . selection . first ( ) ;  // assumir apenas um nó na seleção 
        if  ( mayWorkFor ( selnode , node ) )  { 
          // encontrar qualquer link existente no nó selecionado 
          const link = selnode . findTreeParentLink ( ) ; 
          if  ( link !==  null )  { 
            // reconecte qualquer link existente 
            link . fromNode = node ; 
          }  else  { 
            // caso contrário, crie um novo 
            diagrama de link . toolManager . linkingTool . insertLink ( node , node . port , selnode , selnode . port ) ; 
          } 
        } 
      } 
    } ) 
      . add ( 
        new  go . Panel ( go . Panel . Auto,  {  nome :  'CORPO'  } ) 
          . add ( 
            // define a forma externa do nó 
            new  go . Shape ( 'RoundedRectangle' ,  { 
              name :  'SHAPE' , 
              strokeWidth :  0 , 
              portId :  '' , 
              spot1 : go . Spot . TopLeft , 
              spot2 : go . Spot . BottomRight
             } ) . theme ( 'fill' ,  'background' ) , 
            new  go . Panel ( go . Panel . Table ,  {  margin :  0.5 ,  defaultRowSeparatorStrokeWidth :  0.5  } ) 
              . theme ( 'defaultRowSeparatorStroke' ,  'divider' ) 
              . add ( 
                new  go . Panel ( go . Panel . Table ,  {  padding :  new  go . Margin ( 18 ,  18 ,  18 ,  24 )  } ) 
                  . addColumnDefinition ( 0 ,  {  width :  240  } ) 
                  . adicionar ( 
                    novo  ir . Painel ( ir . Painel . Tabela ,  { 
                      coluna :  0 , 
                      alinhamento : ir . Ponto . Esquerda , 
                      esticar : ir . Esquerda . Esticar . Vertical , 
                      alinhamento padrão : ir . Ponto . Esquerda
                     } ) 
                      . adicionar ( 
                        novo  ir . Painel ( ir . Painel .Horizontal ,  {  linha :  0  } ) 
                          . adicionar ( 
                            novo  go . TextBlock ( {  editável :  true ,  minSize :  novo  go . Tamanho ( 10 ,  14 )  } ) 
                              . bindTwoWay ( 'texto' ,  'nome' ) 
                              . tema ( 'traço' ,  'texto' ) 
                              . tema ( 'fonte' ,  'nome' ) , 
                            novo  go . Painel ( go . Painel . Automático ,  {  margem :  novo  go . Margem ( 0 ,  0 ,  0 ,  10 )  } ) 
                              . adicionar ( 
                                novo  go . Forma ( 'Cápsula' ,  {  parâmetro1 :  6 ,  parâmetro2 :  6  } ) 
                                  . tema ( 'preenchimento' ,  'emblema' ) 
                                  . tema ( 'traço' ,  'borda do emblema' ) , 
                                novo  go . TextBlock ( { 
                                  editável :  true , 
                                  minSize :  novo  go . Tamanho ( 10 ,  12 ) , 
                                  margem :  novo  go . Margem ( 2 ,  - 1 ) 
                                } ) 
                                  . bindTwoWay ( 'texto' ,  'depto' ) 
                                  . tema ( 'traço' ,  'badgeText' ) 
                                  . tema ( 'fonte' ,  'badge' ) 
                              ) 
                          ) , 
                        novo  go . TextBlock ( {  linha :  1 , editável:  true ,  minSize :  novo  go . Tamanho ( 10 ,  14 )  } ) 
                          . bindTwoWay ( 'texto' ,  'título' ) 
                          . tema ( 'traço' ,  'subtexto' ) 
                          . tema ( 'fonte' ,  'normal' ) 
                      ) , 
                    novo  go . Painel ( go . Painel . Ponto ,  {  isClipping :  true ,  coluna :  1  } ) 
                      . adicionar ( 
                        novo  ir . Forma ( 'Círculo' ,  {  tamanhoDesejado :  novo  ir . Tamanho ( 50 ,  50 ) ,  larguraDoTraço :  0  } ) , 
                        novo  ir . Imagem ( { 
                          nome :  'IMAGEM' , 
                          fonte :  '../samples/images/user.svg' , 
                          tamanhoDesejado :  novo  ir . Tamanho ( 50 ,  50 ) 
                        } ) . vincular ( 'fonte' ,  'imagem' , encontrarFotoNaCabeça ) 
                      ) 
                  ) , 
                novo  ir . Painel ( ir . Painel . Tabela ,  { 
                  linha :  1 , 
                  esticar : ir . Esticar . Horizontal , 
                  larguraDeTraçoSeparadorDeColunaDePadrão :  0,5 
                } ) 
                  . tema ( 'defaultColumnSeparatorStroke' ,  'divisor' ) 
                  . adicionar ( makeBottomButton ( 'EMAIL' ) ,  makeBottomButton ( 'TELEFONE' ) ) 
              ) 
          ) , // fim do Painel Automático 
        novo  go .Shape ( ' RoundedLeftRectangle' , {align:go.Spot.Esquerda, alignmentFocus:go.Spot.Esquerda, stretch :  go.Esticar.Vertical 
          , width : 6 , strokeWidth : 0 } ) . themeObject ( ' fill ' , ' ' , ' levels ' , findLevelColor ) , go . GraphObject . build ( ' 
        Button ' , { name : ' BUTTON ' , alignment : go.Spot.Direita , opacidade : 0 , // inicialmente não visível click : ( e , button ) = > addEmployee ( button.part ) } ) // o botão fica visível quando o nó é selecionado ou ao passar o mouse . bindObject ( ' opacity ' , ' isSelected ' , ( s ) = > ( s ? 1 : 0 ) ) . adicionar ( novo ir . Forma ( 'PlusLine' , { largura : 8 , altura : 8 , traço : '#0a0a0a' , largura do traço : 2 } ) ) , 
        ir . GraphObject . construir ( 'TreeExpanderButton' , { _treeExpandedFigure : 'LineUp' , _treeCollapsedFigure : 'LineDown' , nome : 'BUTTONX' , alinhamento : ir . Spot . Bottom , opacidade :0 // inicialmente não visível
          
          
           
           
           
           
          
            
             
        
          
                 
          
                       
           
           
           
           
          
            
        } ) 
          // o botão fica visível quando o nó é selecionado ou ao passar o mouse sobre ele 
          . bindObject ( 'opacity' ,  'isSelected' ,  ( s )  =>  ( s ?  1  :  0 ) ) 
      ) 
      . theme ( 'shadowColor' ,  'shadow' ) 
      // para classificação, faça com que Node.text seja o data.name 
      . bind ( 'text' ,  'name' ) 
      // vincule Part.layerName para controlar a camada do nó, dependendo se ele está selecionado 
      . bindObject ( 'layerName' ,  'isSelected' ,  ( sel )  =>  ( sel ?  'Foreground'  :  '' ) ) 
      . bindTwoWay ( 'isTreeExpanded' ) ;

    função  makeBottomButton ( nome )  { 
      const phonePath = 
        'F M2 3.5A1.5 1.5 0 013.5 2h1.148a1.5 1.5 0 011.465 1.175l.716 3.223a1.5 1.5 0 01-1.052 1.767l-.933.267c-.41.117-.643.555-.48.95a11.542 11.542 0 006.254 6.254c.395.163.833-.07.95-.48l.267-.933a1.5 1.5 0 011.767-1.052l3.223.716A1.5 1,5 0 0118 15.352V16.5a1.5 1,5 0 01-1,5 1,5H15c-1.149 0-2.263-.15-3.326-.43A13.022 13,022 0 012,43 8,326 13,019 13,019 0 012 5V3,5z' ; 
      const emailPath = 
        'F M3 4a2 2 0 00-2 2v1.161l8.441 4.221a1.25 1.25 0 001.118 0L19 7.162V6a2 2 0 00-2-2H3zM19 8.839l-7.77 3.885a2.75 2.75 0 01-2.46 0L1 8.839V14a2 2 0 002 2h14a2 2 0 002-2V8.839z' ; 
      const  convertSelectedToThemeProp  =  ( s )  =>  ( s ?  'textHighlight'  :  'text' ) ; 
      const isEmail = nome ===  'EMAIL' ; 
      retornar  novo  go . Painel ( ir . Painel . Tabela ,  { 
        mouseEnter :  ( e , obj )  => myDiagram . model . set ( obj . part . data , nome ,  true ) , 
        mouseLeave :  ( e , obj )  => myDiagram . model . set ( obj . part . data , nome ,  false ) , 
        nome , 
        plano de fundo :  'transparente' , 
        cursor :  'Ponteiro' , 
        coluna : isEmail ?  0  :  1 , 
        largura :  140 , 
        altura :  40 , 
        dica de ferramenta : dica de ferramenta , 
        clique :  ( e , obj )  =>  { 
          dialog . firstElementChild . firstElementChild . innerHTML =
            // o intervalo do modal 
            ` Você clicou em ${ isEmail ?  'enviar e-mail para'  :  'chamar' } ${ obj . part . data . name } em ${ obj . part . data [ name . toLowerCase ( ) ] } `  ; 
          dialog . showModal ( ) ; 
        } 
      } ) 
        . adicionar ( 
          novo  ir . Painel ( ir . Painel . Horizontal ) 
            . adicionar ( 
              novo  ir . Forma ( { 
                geometryString : isEmail ? emailPath : phonePath , 
                strokeWidth :  0 , 
                desiredSize : isEmail ?  novo  ir . Tamanho ( 20 ,  16 )  :  novo  ir . Tamanho ( 20 ,  20 ) , 
                margem :  novo  ir . Margem ( 0 ,  12 ,  0 ,  0 ) 
              } ) 
                . tema ( 'preencher' ,  'texto' ) 
                . themeData ( 'preencher' , nome ,  nulo , convertSelectedToThemeProp ) , 
              novo  ir . TextBlock ( isEmail ?  'Email'  :  'Telefone' ) 
                . tema ( 'traço' ,  'texto' ) 
                . themeData ( 'traço' , nome ,  nulo , convertSelectedToThemeProp ) 
                . tema ( 'fonte' ,  'link' ) 
            ) 
      ) ; 
    }

    function  addEmployee ( node )  { 
      if  ( ! node )  return ; 
      const thisemp = node.data ; let newnode ; 
      myDiagram.model.commit ( ( m ) => { const newemp = { name : ' ( Nova pessoa)' , title : ' ( Título )' , dept : thisemp.dept , parent : thisemp.key } ;
         m 
        . addNodeData ( newemp ) ; newnode 
        = myDiagram.findNodeForData ( newemp ) ; // define a localização para que o novo nó não seja animado a partir 
      do canto superior esquerdo if ( newnode ) newnode.location = node.location ; } , ' adicionar funcionário ' ) ; myDiagram.commandHandler.scrollToPart ( newnode ) ; }
        
         
           
           
          
          
        
         
       
    

    // o menu de contexto permite que os usuários tornem uma posição vaga, 
    // removam uma função e reatribuam a subárvore ou removam um departamento 
    myDiagram . nodeTemplate . contextMenu = go . GraphObject . build ( 'ContextMenu' ) 
      . add ( 
        go . GraphObject . build ( 'ContextMenuButton' ,  { 
          click :  ( e , button )  =>  addEmployee ( button . part . adornedPart ) 
        } ) . add ( new  go . TextBlock ( 'Add Employee' ) ) , 
        go . GraphObject . build ( 'ContextMenuButton' ,  { 
          click :  ( e , button )  =>  { 
            const node = button . part . adornedPart ; 
            if  ( node !==  null )  { 
              const thisemp = node . data ; 
              myDiagram . model . commit ( ( m )  =>  { 
                // atualiza o nome, foto, e-mail e telefone, mas deixa o cargo/departamento 
                m . set ( thisemp ,  'name' ,  '(Vacant)' ) ; 
                m . set ( thisemp ,  'pic' ,  '' ) ; 
                m . set ( thisemp ,  'email' ,  'nenhum' ) ; 
                m . set ( thisemp ,  'telefone' ,  'nenhum' ) ; 
              } ,  'desocupar' ) ; 
            } 
          } 
        } ) . add( novo  go . TextBlock ( 'Desocupar Posição' ) ) , 
        go . GraphObject . build ( 'ContextMenuButton' ,  { 
          click :  ( e , button )  =>  { 
            // reparente a subárvore para o chefe deste nó, então remova o nó 
            const node = button . part . adornedPart ; 
            if  ( node !==  null )  { 
              myDiagram . model . commit ( ( m )  =>  { 
                const chl = node . findTreeChildrenNodes ( ) ; 
                // itere pelos filhos e defina sua chave pai para a chave pai do nosso nó selecionado 
                while  ( chl . next ( ) )  { 
                  const emp = chl . value ; 
                  m . setParentKeyForNodeData ( emp . data , node . findTreeParentNode ( ) . data . key ) ; 
                } 
                // e agora remova o próprio nó selecionado 
                m . removeNodeData ( node . data ) ; 
              } ,  'reparent remove' ) ; 
            } 
          } 
        } ) . adicionar ( novo  ir . TextBlock ( 'Remover função' ) ) , 
        ir . GraphObject . construir ( 'ContextMenuButton' ,  { 
          clicar :  ( e , botão )  =>  { 
            // remover toda a subárvore, incluindo o próprio nó 
            const nó = botão . parte . adornedPart ; 
            se  ( nó!==  null )  { 
              myDiagram . commit ( ( d )  => d . removeParts ( node . findTreeParts ( ) ) ,  'remover departamento' ) ; 
            } 
          } 
        } ) . add ( new  go . TextBlock ( 'Remover departamento' ) ) 
      ) ;

    // define o modelo de link 
    myDiagram . linkTemplate =  new  go . Link ( { 
      routing : go . Routing . Orthogonal , 
      layerName :  'Background' , 
      corner :  5 
    } ) . add ( new  go . Shape ( {  strokeWidth :  2  } ) . theme ( 'stroke' ,  'link' ) ) ;  // o formato do link

    // leia os dados no formato JSON do elemento "mySavedModel" 
    load ( ) ;

    // suporte à edição das propriedades da pessoa selecionada em HTML 
    myInspector =  new  Inspector ( 'myInspector' , myDiagram ,  { 
      properties :  { 
        key :  {  readOnly :  true  } , 
        // Não mostrar esses valores de dados temporários 
        EMAIL :  {  show :  false  } , 
        PHONE :  {  show :  false  } 
      } 
    } ) ;

    // Configurar botão de zoom para ajustar
    documento
      . getElementById ( 'zoomToFit' ) 
      . addEventListener ( 'clique' ,  ( )  => meuDiagrama . commandHandler . zoomToFit ( ) ) ;

    documento . getElementById ( 'centerRoot' ) . addEventListener ( 'click' ,  ( )  =>  { 
      meuDiagrama . escala =  1 ; 
      meuDiagrama . commandHandler . scrollToPart ( meuDiagrama . findNodeForKey ( 1 ) ) ; 
    } ) ; 
  }  // fim da inicialização

  
  // Exibe o modelo do diagrama no formato JSON function  save ( )  { 
    document.getElementById ( ' mySavedModel ' ) .value = myDiagram.model.toJson ( ) ; 
    myDiagram.isModified = false ; } function load ( ) { myDiagram.model = go.Model.fromJson ( document.getElementById ( ' 
    mySavedModel ' ) .value ) ; // garante que as novas chaves de dados sejam inteiros positivos exclusivos let lastkey = 1 ; 
    myDiagram.model.makeUniqueKeyFunction = ( model , data ) = > { let k = data.key || lastkey ; while ( model.findNodeDataForKey ( k ) ) k ++ ; data.key = lastkey = k ; return k ; } ; }​​
      ​​ 
  
    
    
         
      
       
      
    
  

  função  changeTheme ( )  { 
    const meuDiagrama = go.Diagram.fromDiv ( ' meuDiagramaDiv ' ) ; if ( meuDiagrama ) { 
      meuDiagrama.temaManager.temaAtual = document.getElementById ( ' tema ' ) . valor ; } }​​​​​​
      
    
  

  window . addEventListener ( 'DOMContentLoaded' ,  ( )  =>  { 
    dialog = document . querySelector ( 'dialog' ) ; 
    dialog . addEventListener ( 'click' ,  ( e )  =>  { 
      dialog . close ( ) ; 
    } ) ; 
    // setTimeout apenas para garantir que a fonte seja carregada antes de carregar o diagrama 
    // você pode querer usar uma biblioteca de carregamento de ativos para isso 
    // para manter este exemplo simples, ele não 
    setTimeout ( ( )  =>  { 
      init ( ) ; 
    } ,  300 ) ; 
  } ) ;
